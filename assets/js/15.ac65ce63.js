(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{303:function(e,o,r){"use strict";r.r(o);var t=r(46),a=Object(t.a)({},function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"autolinks-extension"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#autolinks-extension","aria-hidden":"true"}},[e._v("#")]),e._v(" Autolinks (extension)")]),e._v(" "),r("p",[e._v("GFM enables the "),r("code",[e._v("autolink")]),e._v(" extension, where autolinks will be recognised in a greater number of conditions."),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#autolink",target:"_blank",rel:"noopener noreferrer"}},[e._v("Autolink"),r("OutboundLink")],1),e._v("s can also be constructed without requiring the use of "),r("code",[e._v("<")]),e._v(" and to "),r("code",[e._v(">")]),e._v(" to delimit them, although they will be recognized under a smaller set of circumstances. All such recognized autolinks can only come at the beginning of a line, after whitespace, or any of the delimiting characters "),r("code",[e._v("*")]),e._v(", "),r("code",[e._v("_")]),e._v(", "),r("code",[e._v("~")]),e._v(", and "),r("code",[e._v("(")]),e._v("."),r("br"),e._v("\nAn "),r("a",{attrs:{href:"https://github.github.com/gfm/#extended-www-autolink",target:"_blank",rel:"noopener noreferrer"}},[e._v("extended www autolink"),r("OutboundLink")],1),e._v(" will be recognized when the text "),r("code",[e._v("www.")]),e._v(" is found followed by a "),r("a",{attrs:{href:"https://github.github.com/gfm/#valid-domain",target:"_blank",rel:"noopener noreferrer"}},[e._v("valid domain"),r("OutboundLink")],1),e._v(". A "),r("a",{attrs:{href:"https://github.github.com/gfm/#valid-domain",target:"_blank",rel:"noopener noreferrer"}},[e._v("valid domain"),r("OutboundLink")],1),e._v(" consists of alphanumeric characters, underscores ("),r("code",[e._v("_")]),e._v("), hyphens ("),r("code",[e._v("-")]),e._v(") and periods ("),r("code",[e._v(".")]),e._v("). There must be at least one period, and no underscores may be present in the last two segments of the domain."),r("br"),e._v("\nThe scheme "),r("code",[e._v("http")]),e._v(" will be inserted automatically:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-599",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 599"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("www.commonmark.org\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://www.commonmark.org">www.commonmark.org</a></p>\n')])]),e._v(" "),r("p",[e._v("After a "),r("a",{attrs:{href:"https://github.github.com/gfm/#valid-domain",target:"_blank",rel:"noopener noreferrer"}},[e._v("valid domain"),r("OutboundLink")],1),e._v(", zero or more non-space non-"),r("code",[e._v("<")]),e._v(" characters may follow:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-600",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 600"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("Visit www.commonmark.org/help for more information.\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p>Visit <a href="http://www.commonmark.org/help">www.commonmark.org/help</a> for more information.</p>\n')])]),e._v(" "),r("p",[e._v("We then apply "),r("a",{attrs:{href:"https://github.github.com/gfm/#extended-autolink-path-validation",target:"_blank",rel:"noopener noreferrer"}},[e._v("extended autolink path validation"),r("OutboundLink")],1),e._v(" as follows:"),r("br"),e._v("\nTrailing punctuation (specifically, "),r("code",[e._v("?")]),e._v(", "),r("code",[e._v("!")]),e._v(", "),r("code",[e._v(".")]),e._v(", "),r("code",[e._v(",")]),e._v(", "),r("code",[e._v(":")]),e._v(", "),r("code",[e._v("*")]),e._v(", "),r("code",[e._v("_")]),e._v(", and "),r("code",[e._v("~")]),e._v(") will not be considered part of the autolink, though they may be included in the interior of the link:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-601",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 601"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("Visit www.commonmark.org.\n\nVisit www.commonmark.org/a.b.\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p>Visit <a href="http://www.commonmark.org">www.commonmark.org</a>.</p>\n<p>Visit <a href="http://www.commonmark.org/a.b">www.commonmark.org/a.b</a>.</p>\n')])]),e._v(" "),r("p",[e._v("When an autolink ends in "),r("code",[e._v(")")]),e._v(", we scan the entire autolink for the total number of parentheses. If there is a greater number of closing parentheses than opening ones, we don’t consider the last character part of the autolink, in order to facilitate including an autolink inside a parenthesis:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-602",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 602"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("www.google.com/search?q=Markup+(business)\n\n(www.google.com/search?q=Markup+(business))\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://www.google.com/search?q=Markup+(business)">www.google.com/search?q=Markup+(business)</a></p>\n<p>(<a href="http://www.google.com/search?q=Markup+(business)">www.google.com/search?q=Markup+(business)</a>)</p>\n')])]),e._v(" "),r("p",[e._v("This check is only done when the link ends in a closing parentheses "),r("code",[e._v(")")]),e._v(", so if the only parentheses are in the interior of the autolink, no special rules are applied:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-603",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 603"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("www.google.com/search?q=(business))+ok\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://www.google.com/search?q=(business))+ok">www.google.com/search?q=(business))+ok</a></p>\n')])]),e._v(" "),r("p",[e._v("If an autolink ends in a semicolon ("),r("code",[e._v(";")]),e._v("), we check to see if it appears to resemble an "),r("a",{attrs:{href:"https://github.github.com/gfm/#entity-references",target:"_blank",rel:"noopener noreferrer"}},[e._v("entity reference"),r("OutboundLink")],1),e._v("; if the preceding text is "),r("code",[e._v("&")]),e._v(" followed by one or more alphanumeric characters. If so, it is excluded from the autolink:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-604",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 604"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("www.google.com/search?q=commonmark&hl=en\n\nwww.google.com/search?q=commonmark&hl;\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://www.google.com/search?q=commonmark&amp;hl=en">www.google.com/search?q=commonmark&amp;hl=en</a></p>\n<p><a href="http://www.google.com/search?q=commonmark">www.google.com/search?q=commonmark</a>&amp;hl;</p>\n')])]),e._v(" "),r("p",[r("code",[e._v("<")]),e._v(" immediately ends an autolink."),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-605",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 605"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("www.commonmark.org/he<lp\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://www.commonmark.org/he">www.commonmark.org/he</a>&lt;lp</p>\n')])]),e._v(" "),r("p",[e._v("An "),r("a",{attrs:{href:"https://github.github.com/gfm/#extended-url-autolink",target:"_blank",rel:"noopener noreferrer"}},[e._v("extended url autolink"),r("OutboundLink")],1),e._v(" will be recognised when one of the schemes "),r("code",[e._v("http://")]),e._v(", "),r("code",[e._v("https://")]),e._v(", or "),r("code",[e._v("ftp://")]),e._v(", followed by a "),r("a",{attrs:{href:"https://github.github.com/gfm/#valid-domain",target:"_blank",rel:"noopener noreferrer"}},[e._v("valid domain"),r("OutboundLink")],1),e._v(", then zero or more non-space non-"),r("code",[e._v("<")]),e._v(" characters according to "),r("a",{attrs:{href:"https://github.github.com/gfm/#extended-autolink-path-validation",target:"_blank",rel:"noopener noreferrer"}},[e._v("extended autolink path validation"),r("OutboundLink")],1),e._v(":"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-606",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 606"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("http://commonmark.org\n\n(Visit https://encrypted.google.com/search?q=Markup+(business))\n\nAnonymous FTP is available at ftp://foo.bar.baz.\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://commonmark.org">http://commonmark.org</a></p>\n<p>(Visit <a href="https://encrypted.google.com/search?q=Markup+(business)">https://encrypted.google.com/search?q=Markup+(business)</a>)</p>\n<p>Anonymous FTP is available at <a href="ftp://foo.bar.baz">ftp://foo.bar.baz</a>.</p>\n')])]),e._v(" "),r("p",[e._v("An "),r("a",{attrs:{href:"https://github.github.com/gfm/#extended-email-autolink",target:"_blank",rel:"noopener noreferrer"}},[e._v("extended email autolink"),r("OutboundLink")],1),e._v(" will be recognised when an email address is recognised within any text node. Email addresses are recognised according to the following rules:")]),e._v(" "),r("ul",[r("li",[e._v("One ore more characters which are alphanumeric, or "),r("code",[e._v(".")]),e._v(", "),r("code",[e._v("-")]),e._v(", "),r("code",[e._v("_")]),e._v(", or "),r("code",[e._v("+")]),e._v(".")]),e._v(" "),r("li",[e._v("An "),r("code",[e._v("@")]),e._v(" symbol.")]),e._v(" "),r("li",[e._v("One or more characters which are alphanumeric, or "),r("code",[e._v(".")]),e._v(", "),r("code",[e._v("-")]),e._v(", or "),r("code",[e._v("_")]),e._v(". At least one of the characters here must be a period ("),r("code",[e._v(".")]),e._v("). The last character must not be one of "),r("code",[e._v("-")]),e._v(" or "),r("code",[e._v("_")]),e._v(". If the last character is a period ("),r("code",[e._v(".")]),e._v("), it will be excluded from the autolink.")])]),e._v(" "),r("p",[e._v("The scheme "),r("code",[e._v("mailto:")]),e._v(" will automatically be added to the generated link:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-607",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 607"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("foo@bar.baz\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="mailto:foo@bar.baz">foo@bar.baz</a></p>\n')])]),e._v(" "),r("p",[r("code",[e._v("+")]),e._v(" can occur before the "),r("code",[e._v("@")]),e._v(", but not after."),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-608",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 608"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("hello@mail+xyz.example isn't valid, but hello+xyz@mail.example is.\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p>hello@mail+xyz.example isn\'t valid, but <a href="mailto:hello+xyz@mail.example">hello+xyz@mail.example</a> is.</p>\n')])]),e._v(" "),r("p",[r("code",[e._v(".")]),e._v(", "),r("code",[e._v("-")]),e._v(", and "),r("code",[e._v("_")]),e._v(" can occur on both sides of the "),r("code",[e._v("@")]),e._v(", but only "),r("code",[e._v(".")]),e._v(" may occur at the end of the email address, in which case it will not be considered part of the address:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-609",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 609"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("a.b-c_d@a.b\n\na.b-c_d@a.b.\n\na.b-c_d@a.b-\n\na.b-c_d@a.b_\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="mailto:a.b-c_d@a.b">a.b-c_d@a.b</a></p>\n<p><a href="mailto:a.b-c_d@a.b">a.b-c_d@a.b</a>.</p>\n<p>a.b-c_d@a.b-</p>\n<p>a.b-c_d@a.b_</p>\n')])])])},[],!1,null,null,null);o.default=a.exports}}]);