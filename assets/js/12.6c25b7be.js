(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{368:function(e,n,t){"use strict";t.r(n);var r=t(46),i=Object(r.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"lists"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lists","aria-hidden":"true"}},[e._v("#")]),e._v(" Lists")]),e._v(" "),t("p",[e._v("A "),t("a",{attrs:{href:"https://github.github.com/gfm/#list",target:"_blank",rel:"noopener noreferrer"}},[e._v("list"),t("OutboundLink")],1),e._v(" is a sequence of one or more list items "),t("a",{attrs:{href:"https://github.github.com/gfm/#of-the-same-type",target:"_blank",rel:"noopener noreferrer"}},[e._v("of the same type"),t("OutboundLink")],1),e._v(". The list items may be separated by any number of blank lines."),t("br"),e._v("\nTwo list items are "),t("a",{attrs:{href:"https://github.github.com/gfm/#of-the-same-type",target:"_blank",rel:"noopener noreferrer"}},[e._v("of the same type"),t("OutboundLink")],1),e._v(" if they begin with a "),t("a",{attrs:{href:"https://github.github.com/gfm/#list-marker",target:"_blank",rel:"noopener noreferrer"}},[e._v("list marker"),t("OutboundLink")],1),e._v(" of the same type. Two list markers are of the same type if (a) they are bullet list markers using the same character ("),t("code",[e._v("-")]),e._v(", "),t("code",[e._v("+")]),e._v(", or "),t("code",[e._v("*")]),e._v(") or (b) they are ordered list numbers with the same delimiter (either "),t("code",[e._v(".")]),e._v(" or "),t("code",[e._v(")")]),e._v(")."),t("br"),e._v("\nA list is an "),t("a",{attrs:{href:"https://github.github.com/gfm/#ordered-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("ordered list"),t("OutboundLink")],1),e._v(" if its constituent list items begin with "),t("a",{attrs:{href:"https://github.github.com/gfm/#ordered-list-marker",target:"_blank",rel:"noopener noreferrer"}},[e._v("ordered list markers"),t("OutboundLink")],1),e._v(", and a "),t("a",{attrs:{href:"https://github.github.com/gfm/#bullet-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("bullet list"),t("OutboundLink")],1),e._v(" if its constituent list items begin with "),t("a",{attrs:{href:"https://github.github.com/gfm/#bullet-list-marker",target:"_blank",rel:"noopener noreferrer"}},[e._v("bullet list markers"),t("OutboundLink")],1),e._v("."),t("br"),e._v("\nThe "),t("a",{attrs:{href:"https://github.github.com/gfm/#start-number",target:"_blank",rel:"noopener noreferrer"}},[e._v("start number"),t("OutboundLink")],1),e._v(" of an "),t("a",{attrs:{href:"https://github.github.com/gfm/#ordered-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("ordered list"),t("OutboundLink")],1),e._v(" is determined by the list number of its initial list item. The numbers of subsequent list items are disregarded."),t("br"),e._v("\nA list is "),t("a",{attrs:{href:"https://github.github.com/gfm/#loose",target:"_blank",rel:"noopener noreferrer"}},[e._v("loose"),t("OutboundLink")],1),e._v(" if any of its constituent list items are separated by blank lines, or if any of its constituent list items directly contain two block-level elements with a blank line between them. Otherwise a list is "),t("a",{attrs:{href:"https://github.github.com/gfm/#tight",target:"_blank",rel:"noopener noreferrer"}},[e._v("tight"),t("OutboundLink")],1),e._v(". (The difference in HTML output is that paragraphs in a loose list are wrapped in "),t("code",[e._v("<p>")]),e._v(" tags, while paragraphs in a tight list are not.)"),t("br"),e._v("\nChanging the bullet or ordered list delimiter starts a new list:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-274",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 274"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- foo\n- bar\n+ baz\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-275",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 275"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("1. foo\n2. bar\n3) baz\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v('<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start="3">\n<li>baz</li>\n</ol>\n')])]),e._v(" "),t("p",[e._v("In CommonMark, a list can interrupt a paragraph. That is, no blank line is needed to separate a paragraph from a following list:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-276",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 276"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("Foo\n- bar\n- baz\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>\n")])]),e._v(" "),t("p",[t("code",[e._v("Markdown.pl")]),e._v(" does not allow this, through fear of triggering a list via a numeral in a hard-wrapped line:")]),e._v(" "),t("pre",[t("code",[e._v("The number of windows in my house is\n14.  The number of doors is 6.\n")])]),e._v(" "),t("p",[e._v("Oddly, though, "),t("code",[e._v("Markdown.pl")]),e._v(" "),t("em",[e._v("does")]),e._v(" allow a blockquote to interrupt a paragraph, even though the same considerations might apply."),t("br"),e._v("\nIn CommonMark, we do allow lists to interrupt paragraphs, for two reasons. First, it is natural and not uncommon for people to start lists without blank lines:")]),e._v(" "),t("pre",[t("code",[e._v("I need to buy\n- new shoes\n- a coat\n- a plane ticket\n")])]),e._v(" "),t("p",[e._v("Second, we are attracted to a")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#principle-of-uniformity",target:"_blank",rel:"noopener noreferrer"}},[e._v("principle of uniformity"),t("OutboundLink")],1),e._v(": if a chunk of text has a certain meaning, it will continue to have the same meaning when put into a container block (such as a list item or blockquote).")])]),e._v(" "),t("p",[e._v("(Indeed, the spec for "),t("a",{attrs:{href:"https://github.github.com/gfm/#list-items",target:"_blank",rel:"noopener noreferrer"}},[e._v("list items"),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://github.github.com/gfm/#block-quotes",target:"_blank",rel:"noopener noreferrer"}},[e._v("block quotes"),t("OutboundLink")],1),e._v(" presupposes this principle.) This principle implies that if")]),e._v(" "),t("pre",[t("code",[e._v("  * I need to buy\n    - new shoes\n    - a coat\n    - a plane ticket\n")])]),e._v(" "),t("p",[e._v("is a list item containing a paragraph followed by a nested sublist, as all Markdown implementations agree it is (though the paragraph may be rendered without "),t("code",[e._v("<p>")]),e._v(" tags, since the list is “tight”), then")]),e._v(" "),t("pre",[t("code",[e._v("I need to buy\n- new shoes\n- a coat\n- a plane ticket\n")])]),e._v(" "),t("p",[e._v("by itself should be a paragraph followed by a nested sublist."),t("br"),e._v("\nSince it is well established Markdown practice to allow lists to interrupt paragraphs inside list items, the "),t("a",{attrs:{href:"https://github.github.com/gfm/#principle-of-uniformity",target:"_blank",rel:"noopener noreferrer"}},[e._v("principle of uniformity"),t("OutboundLink")],1),e._v(" requires us to allow this outside list items as well. ("),t("a",{attrs:{href:"http://docutils.sourceforge.net/rst.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("reStructuredText"),t("OutboundLink")],1),e._v(" takes a different approach, requiring blank lines before lists even inside other list items.)"),t("br"),e._v("\nIn order to solve of unwanted lists in paragraphs with hard-wrapped numerals, we allow only lists starting with "),t("code",[e._v("1")]),e._v(" to interrupt paragraphs. Thus,"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-277",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 277"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("The number of windows in my house is\n14.  The number of doors is 6.\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<p>The number of windows in my house is\n14.  The number of doors is 6.</p>\n")])]),e._v(" "),t("p",[e._v("We may still get an unintended result in cases like"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-278",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 278"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("The number of windows in my house is\n1.  The number of doors is 6.\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>\n")])]),e._v(" "),t("p",[e._v("but this rule should prevent most spurious list captures."),t("br"),e._v("\nThere can be any number of blank lines between items:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-279",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 279"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- foo\n\n- bar\n\n\n- baz\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-280",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 280"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- foo\n  - bar\n    - baz\n\n\n      bim\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("To separate consecutive lists of the same type, or to separate a list from an indented code block that would otherwise be parsed as a subparagraph of the final list item, you can insert a blank HTML comment:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-281",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 281"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- foo\n- bar\n\n\x3c!-- --\x3e\n\n- baz\n- bim\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n\x3c!-- --\x3e\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-282",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 282"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("-   foo\n\n    notcode\n\n-   foo\n\n\x3c!-- --\x3e\n\n    code\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n\x3c!-- --\x3e\n<pre><code>code\n</code></pre>\n")])]),e._v(" "),t("p",[e._v("List items need not be indented to the same level. The following list items will be treated as items at the same list level, since none is indented enough to belong to the previous list item:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-283",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 283"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-284",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 284"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("1. a\n\n  2. b\n\n   3. c\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n")])]),e._v(" "),t("p",[e._v("Note, however, that list items may not be indented more than three spaces. Here "),t("code",[e._v("- e")]),e._v(" is treated as a paragraph continuation line, because it is indented more than three spaces:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-285",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 285"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n - b\n  - c\n   - d\n    - e\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("And here, "),t("code",[e._v("3. c")]),e._v(" is treated as in indented code block, because it is indented four spaces and preceded by a blank line."),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-286",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 286"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("1. a\n\n  2. b\n\n    3. c\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n")])]),e._v(" "),t("p",[e._v("This is a loose list, because there is a blank line between two of the list items:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-287",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 287"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n- b\n\n- c\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("So is this, with a empty second item:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-288",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 288"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("* a\n*\n\n* c\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("These are loose lists, even though there is no space between the items, because one of the items directly contains two block-level elements with a blank line between them:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-289",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 289"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n- b\n\n  c\n- d\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-290",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 290"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n- b\n\n  [ref]: /url\n- d\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("This is a tight list, because the blank lines are in a code block:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-291",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 291"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n- ```\n  b\n\n\n  ```\n- c\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("This is a tight list, because the blank line is between two paragraphs of a sublist. So the sublist is loose while the outer list is tight:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-292",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 292"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n  - b\n\n    c\n- d\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("This is a tight list, because the blank line is inside the block quote:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-293",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 293"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("* a\n  > b\n  >\n* c\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("This list is tight, because the consecutive block elements are not separated by blank lines:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-294",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 294"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n  > b\n  ```\n  c\n  ```\n- d\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("A single-paragraph list is tight:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-295",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 295"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-296",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 296"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n  - b\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[e._v("This list is loose, because of the blank line between the two block elements in the list item:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-297",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 297"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("1. ```\n   foo\n   ```\n\n   bar\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>\n")])]),e._v(" "),t("p",[e._v("Here the outer list is loose, the inner list tight:"),t("br"),e._v(" "),t("a",{attrs:{href:"https://github.github.com/gfm/#example-298",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 298"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("* foo\n  * bar\n\n  baz\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>\n")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.github.com/gfm/#example-299",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 299"),t("OutboundLink")],1)]),e._v(" "),t("pre",[t("code",[e._v("- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n")])]),e._v(" "),t("p"),e._v(" "),t("pre",[t("code",[e._v("<ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>\n")])])])},[],!1,null,null,null);n.default=i.exports}}]);