(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{355:function(e,t,r){"use strict";r.r(t);var n=r(46),a=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"code-spans"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#code-spans","aria-hidden":"true"}},[e._v("#")]),e._v(" Code spans")]),e._v(" "),r("p",[e._v("A "),r("a",{attrs:{href:"https://github.github.com/gfm/#backtick-string",target:"_blank",rel:"noopener noreferrer"}},[e._v("backtick string"),r("OutboundLink")],1),e._v(" is a string of one or more backtick characters ("),r("code",[e._v("`")]),e._v(") that is neither preceded nor followed by a backtick."),r("br"),e._v("\nA "),r("a",{attrs:{href:"https://github.github.com/gfm/#code-span",target:"_blank",rel:"noopener noreferrer"}},[e._v("code span"),r("OutboundLink")],1),e._v(" begins with a backtick string and ends with a backtick string of equal length. The contents of the code span are the characters between the two backtick strings, with leading and trailing spaces and "),r("a",{attrs:{href:"https://github.github.com/gfm/#line-ending",target:"_blank",rel:"noopener noreferrer"}},[e._v("line endings"),r("OutboundLink")],1),e._v(" removed, and "),r("a",{attrs:{href:"https://github.github.com/gfm/#whitespace",target:"_blank",rel:"noopener noreferrer"}},[e._v("whitespace"),r("OutboundLink")],1),e._v(" collapsed to single spaces."),r("br"),e._v("\nThis is a simple code span:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-326",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 326"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`foo`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>foo</code></p>\n")])]),e._v(" "),r("p",[e._v("Here two backticks are used, because the code contains a backtick. This example also illustrates stripping of leading and trailing spaces:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-327",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 327"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`` foo ` bar  ``\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>foo ` bar</code></p>\n")])]),e._v(" "),r("p",[e._v("This example shows the motivation for stripping leading and trailing spaces:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-328",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 328"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("` `` `\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>``</code></p>\n")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.github.com/gfm/#line-ending",target:"_blank",rel:"noopener noreferrer"}},[e._v("Line endings"),r("OutboundLink")],1),e._v(" are treated like spaces:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-329",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 329"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("``\nfoo\n``\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>foo</code></p>\n")])]),e._v(" "),r("p",[e._v("Interior spaces and "),r("a",{attrs:{href:"https://github.github.com/gfm/#line-ending",target:"_blank",rel:"noopener noreferrer"}},[e._v("line endings"),r("OutboundLink")],1),e._v(" are collapsed into single spaces, just as they would be by a browser:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-330",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 330"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`foo   bar\n  baz`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>foo bar baz</code></p>\n")])]),e._v(" "),r("p",[e._v("Not all "),r("a",{attrs:{href:"https://github.github.com/gfm/#unicode-whitespace",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unicode whitespace"),r("OutboundLink")],1),e._v(" (for instance, non-breaking space) is collapsed, however:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-331",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 331"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`a  b`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>a  b</code></p>\n")])]),e._v(" "),r("p",[e._v("Q: Why not just leave the spaces, since browsers will collapse them anyway? A: Because we might be targeting a non-HTML format, and we shouldn’t rely on HTML-specific rendering assumptions."),r("br"),e._v("\n(Existing implementations differ in their treatment of internal spaces and "),r("a",{attrs:{href:"https://github.github.com/gfm/#line-ending",target:"_blank",rel:"noopener noreferrer"}},[e._v("line endings"),r("OutboundLink")],1),e._v(". Some, including "),r("code",[e._v("Markdown.pl")]),e._v(" and "),r("code",[e._v("showdown")]),e._v(", convert an internal "),r("a",{attrs:{href:"https://github.github.com/gfm/#line-ending",target:"_blank",rel:"noopener noreferrer"}},[e._v("line ending"),r("OutboundLink")],1),e._v(" into a "),r("code",[e._v("<br />")]),e._v(" tag. But this makes things difficult for those who like to hard-wrap their paragraphs, since a line break in the midst of a code span will cause an unintended line break in the output. Others just leave internal spaces as they are, which is fine if only HTML is being targeted.)"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-332",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 332"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`foo `` bar`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>foo `` bar</code></p>\n")])]),e._v(" "),r("p",[e._v("Note that backslash escapes do not work in code spans. All backslashes are treated literally:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-333",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 333"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`foo\\`bar`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>foo\\</code>bar`</p>\n")])]),e._v(" "),r("p",[e._v("Backslash escapes are never needed, because one can always choose a string of "),r("em",[e._v("n")]),e._v(" backtick characters as delimiters, where the code does not contain any strings of exactly "),r("em",[e._v("n")]),e._v(" backtick characters."),r("br"),e._v("\nCode span backticks have higher precedence than any other inline constructs except HTML tags and autolinks. Thus, for example, this is not parsed as emphasized text, since the second "),r("code",[e._v("*")]),e._v(" is part of a code span:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-334",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 334"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("*foo`*`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p>*foo<code>*</code></p>\n")])]),e._v(" "),r("p",[e._v("And this is not parsed as a link:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-335",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 335"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("[not a `link](/foo`)\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p>[not a <code>link](/foo</code>)</p>\n")])]),e._v(" "),r("p",[e._v("Code spans, HTML tags, and autolinks have the same precedence. Thus, this is code:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-336",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 336"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v('`<a href="`">`\n')])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>\n")])]),e._v(" "),r("p",[e._v("But this is an HTML tag:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-337",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 337"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v('<a href="`">`\n')])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="`">`</p>\n')])]),e._v(" "),r("p",[e._v("And this is code:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-338",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 338"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`<http://foo.bar.`baz>`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>\n")])]),e._v(" "),r("p",[e._v("But this is an autolink:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-339",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 339"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("<http://foo.bar.`baz>`\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v('<p><a href="http://foo.bar.%60baz">http://foo.bar.`baz</a>`</p>\n')])]),e._v(" "),r("p",[e._v("When a backtick string is not closed by a matching backtick string, we just have literal backticks:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-340",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 340"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("```foo``\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p>```foo``</p>\n")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.github.com/gfm/#example-341",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 341"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`foo\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p>`foo</p>\n")])]),e._v(" "),r("p",[e._v("The following case also illustrates the need for opening and closing backtick strings to be equal in length:"),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.github.com/gfm/#example-342",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example 342"),r("OutboundLink")],1)]),e._v(" "),r("pre",[r("code",[e._v("`foo``bar``\n")])]),e._v(" "),r("p"),e._v(" "),r("pre",[r("code",[e._v("<p>`foo<code>bar</code></p>\n")])])])},[],!1,null,null,null);t.default=a.exports}}]);